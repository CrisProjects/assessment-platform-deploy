#!/usr/bin/env python3
"""
Diagn√≥stico espec√≠fico para el error "Error al iniciar la evaluaci√≥n"
en la versi√≥n desplegada en Vercel
"""
import requests
import json
from datetime import datetime

def diagnose_vercel_error():
    print("üîç DIAGN√ìSTICO: Error al iniciar evaluaci√≥n en Vercel")
    print("=" * 60)
    print(f"Timestamp: {datetime.now()}")
    print()
    
    # URLs a probar
    vercel_url = "https://assessment-platform-deploy.vercel.app"  # Nueva URL esperada
    backend_url = "https://assessment-platform-1nuo.onrender.com"
    
    print("üåê STEP 1: Verificando accesibilidad de URLs")
    print("-" * 40)
    
    # Test Vercel frontend
    try:
        response = requests.get(vercel_url, timeout=10)
        if response.status_code == 200:
            print(f"‚úÖ Vercel Frontend: ACCESSIBLE ({response.status_code})")
            print(f"   URL: {vercel_url}")
        else:
            print(f"‚ùå Vercel Frontend: ERROR ({response.status_code})")
    except Exception as e:
        print(f"‚ùå Vercel Frontend: ERROR - {e}")
    
    # Test backend
    try:
        response = requests.get(backend_url, timeout=10)
        if response.status_code == 200:
            print(f"‚úÖ Render Backend: ACCESSIBLE ({response.status_code})")
        else:
            print(f"‚ùå Render Backend: ERROR ({response.status_code})")
    except Exception as e:
        print(f"‚ùå Render Backend: ERROR - {e}")
    
    print("\nüîß STEP 2: Simulando flujo de startAssessment()")
    print("-" * 40)
    
    session = requests.Session()
    session.headers.update({
        'Origin': vercel_url,
        'Referer': vercel_url,
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
    })
    
    # Simular el flujo exacto de startAssessment()
    try:
        # Paso 1: Login autom√°tico
        print("1Ô∏è‚É£ Testing auto-login...")
        login_response = session.post(
            f"{backend_url}/api/login",
            json={"username": "admin", "password": "admin123"},
            timeout=10
        )
        print(f"   Login status: {login_response.status_code}")
        
        if login_response.status_code == 200:
            print("   ‚úÖ Login exitoso")
            
            # Paso 2: Demographics
            print("2Ô∏è‚É£ Testing demographics...")
            demo_response = session.post(
                f"{backend_url}/api/demographics",
                json={
                    "name": "Test User",
                    "email": "test@example.com", 
                    "age": 25,
                    "gender": "masculino"
                },
                timeout=10
            )
            print(f"   Demographics status: {demo_response.status_code}")
            
            if demo_response.status_code == 200:
                print("   ‚úÖ Demographics exitoso")
                print("   ‚úÖ Flujo b√°sico funciona - problema debe ser en frontend")
                
                # Paso 3: Verificar si las preguntas integradas est√°n en el HTML
                print("3Ô∏è‚É£ Verificando preguntas integradas...")
                html_response = requests.get(vercel_url)
                html_content = html_response.text
                
                if "TEMP_QUESTIONS" in html_content:
                    print("   ‚úÖ Preguntas integradas encontradas en HTML")
                else:
                    print("   ‚ùå Preguntas integradas NO encontradas en HTML")
                
                if "startAssessment" in html_content:
                    print("   ‚úÖ Funci√≥n startAssessment encontrada")
                else:
                    print("   ‚ùå Funci√≥n startAssessment NO encontrada")
                    
            else:
                print(f"   ‚ùå Demographics fall√≥: {demo_response.text}")
        else:
            print(f"   ‚ùå Login fall√≥: {login_response.text}")
            
    except Exception as e:
        print(f"‚ùå Error en simulaci√≥n: {e}")
    
    print("\nüîç STEP 3: Verificando CORS y configuraci√≥n")
    print("-" * 40)
    
    # Test CORS headers
    try:
        response = session.options(f"{backend_url}/api/login")
        cors_headers = {k: v for k, v in response.headers.items() if 'access-control' in k.lower()}
        print("CORS Headers:")
        for header, value in cors_headers.items():
            print(f"   {header}: {value}")
            
        if vercel_url.replace('https://', '') in response.headers.get('Access-Control-Allow-Origin', ''):
            print("   ‚úÖ CORS configurado para esta URL")
        else:
            print("   ‚ùå CORS posiblemente mal configurado")
            
    except Exception as e:
        print(f"‚ùå Error verificando CORS: {e}")
    
    print("\nüí° STEP 4: Recomendaciones de debugging")
    print("-" * 40)
    print("Para diagnosticar el problema espec√≠fico:")
    print("1. Abre las Dev Tools en el navegador (F12)")
    print("2. Ve a la pesta√±a Console")
    print("3. Intenta iniciar la evaluaci√≥n")
    print("4. Busca errores espec√≠ficos en la consola")
    print("5. Ve a la pesta√±a Network para ver qu√© requests fallan")
    print()
    print("Posibles causas del error:")
    print("‚Ä¢ CORS: Backend no acepta requests desde tu URL de Vercel")
    print("‚Ä¢ JavaScript: Error en la funci√≥n startAssessment()")
    print("‚Ä¢ Missing data: Preguntas integradas no est√°n en el HTML")
    print("‚Ä¢ API: Alg√∫n endpoint del backend est√° fallando")
    
    return True

if __name__ == "__main__":
    diagnose_vercel_error()
